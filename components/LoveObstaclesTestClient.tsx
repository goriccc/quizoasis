'use client';

import { useState, useEffect, useMemo } from 'react';
import { useTranslations } from 'next-intl';
import { LoveObstacleQuestion, LoveObstacleResult, calculateLoveObstacleResult } from '@/lib/loveObstaclesData';
import Link from 'next/link';
import Image from 'next/image';
import { Play, Share2, MessageCircle, Send, Link as LinkIcon } from 'lucide-react';
import { getThumbnailUrl, formatPlayCount } from '@/lib/utils';
import { Locale } from '@/i18n';
import { incrementPlayCount, getTests } from '@/lib/supabase';
import { searchAliExpressProducts, getProductKeywordsForDating } from '@/lib/aliexpress';
import ProductRecommendations from './ProductRecommendations';
import AdSensePlaceholder, { ADSENSE_CONFIG } from '@/lib/adsense';

interface LoveObstaclesTestClientProps {
  locale: string;
  slug: string;
  title: string;
  description: string;
  questions: LoveObstacleQuestion[];
  results: LoveObstacleResult[];
  questionCount: number;
  thumbnail?: string;
  playCount?: number;
  similarTests?: Array<{
    id: number;
    slug: string;
    title: string;
    thumbnail: string;
    playCount: number;
  }>;
}

export default function LoveObstaclesTestClient({ 
  locale, 
  slug, 
  title, 
  description,
  questions,
  results,
  questionCount,
  thumbnail,
  playCount = 0,
  similarTests = []
}: LoveObstaclesTestClientProps) {
  const t = useTranslations();
  const [started, setStarted] = useState(false);
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [answers, setAnswers] = useState<any[]>([]);
  const [result, setResult] = useState<LoveObstacleResult | null>(null);
  const [showResult, setShowResult] = useState(false);
  const [shuffledQuestions, setShuffledQuestions] = useState<LoveObstacleQuestion[]>(questions);
  const [displayPlayCount, setDisplayPlayCount] = useState(playCount);
  const [similarTestsState, setSimilarTestsState] = useState(similarTests);
  const [popularTestsState, setPopularTestsState] = useState<any[]>([]);
  const [showLoadingSpinner, setShowLoadingSpinner] = useState(false);
  const [showResultPopup, setShowResultPopup] = useState(false);
  const [aliProducts, setAliProducts] = useState<any[]>([]);
  const [shuffledOptionsMap, setShuffledOptionsMap] = useState<Record<number, any[]>>({});
  const [hasIncrementedPlayCount, setHasIncrementedPlayCount] = useState(false);

  // ÎãµÎ≥Ä ÏàúÏÑú ÏÑûÍ∏∞ (ÏßàÎ¨∏Ïù¥ Î∞îÎÄî ÎïåÎßàÎã§)
  useEffect(() => {
    if (!started) return;
    
    const questionKey = currentQuestion;
    if (!shuffledOptionsMap[questionKey]) {
      const optionsCopy = [...shuffledQuestions[currentQuestion].options];
      for (let i = optionsCopy.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [optionsCopy[i], optionsCopy[j]] = [optionsCopy[j], optionsCopy[i]];
      }
      setShuffledOptionsMap(prev => ({
        ...prev,
        [questionKey]: optionsCopy
      }));
    }
  }, [currentQuestion, started, shuffledOptionsMap, shuffledQuestions]);

  // ÏïåÎ¶¨ÏùµÏä§ÌîÑÎ†àÏä§ ÏÉÅÌíà ÎØ∏Î¶¨ Î°úÎìú (ÏãúÏûë ÌôîÎ©¥Ïö© - ÏùºÎ∞ò Ï∂îÏ≤ú)
  useEffect(() => {
    if (locale !== 'ko' && !started && aliProducts.length === 0) {
      const loadProducts = async () => {
        try {
          const products = await searchAliExpressProducts('couple gifts', 4, locale);
          setAliProducts(products);
        } catch (error) {
          console.error('ÏÉÅÌíà Î°úÎìú Ïã§Ìå®:', error);
        }
      };
      loadProducts();
    }
  }, [locale, started, aliProducts.length]);

  // AdSense Í¥ëÍ≥† Î°úÎìú
  useEffect(() => {
    if (showResult) return;
    
    const timer = setTimeout(() => {
      try {
        if (typeof window !== 'undefined') {
          const adElements = document.querySelectorAll('.adsbygoogle');
          
          adElements.forEach((el) => {
            const status = (el as HTMLElement).getAttribute('data-adsbygoogle-status');
            if (!status || status === '') {
              try {
                ((window as any).adsbygoogle = (window as any).adsbygoogle || []).push({});
              } catch (err) {
                if (!(err as Error).message.includes('already have ads')) {
                  console.error('AdSense error:', err);
                }
              }
            }
          });
        }
      } catch (err) {
        console.error('AdSense error:', err);
      }
    }, 100);
    
    return () => clearTimeout(timer);
  }, [started, showResult, showLoadingSpinner, showResultPopup]);

  // ÏïåÎ¶¨ÏùµÏä§ÌîÑÎ†àÏä§ ÏÉÅÌíà Î°úÎìú (Í≤∞Í≥ºÏóê ÎßûÏ∂∞)
  useEffect(() => {
    if (result && locale !== 'ko') {
      const loadProducts = async () => {
        try {
          const keywords = getProductKeywordsForDating(result.type, locale);
          const products = await searchAliExpressProducts(keywords[0], 4, locale);
          setAliProducts(products);
        } catch (error) {
          console.error('ÏÉÅÌíà Î°úÎìú Ïã§Ìå®:', error);
        }
      };
      loadProducts();
    }
  }, [result, locale]);

  // Ïú†ÏÇ¨Ìïú ÌÖåÏä§Ìä∏ÏôÄ Ïù∏Í∏∞ ÌÖåÏä§Ìä∏ Î°úÎìú
  useEffect(() => {
    if (similarTests.length === 0) {
      const loadTests = async () => {
        try {
          const allTests = await getTests();
          const currentTest = allTests.find(t => t.slug === slug);
          
          if (!currentTest) {
            const latestTests = allTests
              .filter(t => t.slug !== slug)
              .slice(0, 10)
              .map(t => ({
                id: t.id,
                slug: t.slug,
                title: t.title[locale] || t.title.ko,
                thumbnail: t.thumbnail,
                playCount: t.play_count
              }));
            
            setSimilarTestsState(latestTests.slice(0, 5));
            setPopularTestsState(latestTests.slice(5, 10));
            return;
          }

          const currentTestTags = typeof currentTest.tags === 'object' && !Array.isArray(currentTest.tags)
            ? currentTest.tags[locale] || currentTest.tags.ko || []
            : currentTest.tags || [];

          const similarTestsList = allTests
            .filter(t => t.slug !== slug)
            .filter(t => {
              const otherTestTags = typeof t.tags === 'object' && !Array.isArray(t.tags)
                ? t.tags[locale] || t.tags.ko || []
                : t.tags || [];
              
              return Array.isArray(currentTestTags) && Array.isArray(otherTestTags) &&
                currentTestTags.some(tag => otherTestTags.includes(tag));
            })
            .sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime())
            .slice(0, 5)
            .map(t => ({
              id: t.id,
              slug: t.slug,
              title: t.title[locale] || t.title.ko,
              thumbnail: t.thumbnail,
              playCount: t.play_count
            }));

          const similarTestSlugs = new Set(similarTestsList.map(t => t.slug));
          const popularTestsList = allTests
            .filter(t => t.slug !== slug && !similarTestSlugs.has(t.slug))
            .sort((a, b) => b.play_count - a.play_count)
            .slice(0, 5)
            .map(t => ({
              id: t.id,
              slug: t.slug,
              title: t.title[locale] || t.title.ko,
              thumbnail: t.thumbnail,
              playCount: t.play_count
            }));

          setSimilarTestsState(similarTestsList);
          setPopularTestsState(popularTestsList);
        } catch (error) {
          console.error('ÌÖåÏä§Ìä∏ Î°úÎìú Ïã§Ìå®:', error);
        }
      };

      loadTests();
    }
  }, [slug, locale, similarTests]);

  // 3Ï¥à ÏßÄÏó∞ Î°úÎî© Ïä§ÌîºÎÑà
  useEffect(() => {
    if (showLoadingSpinner) {
      const timer = setTimeout(() => {
        setShowLoadingSpinner(false);
        setShowResultPopup(true);
      }, 3000);
      return () => clearTimeout(timer);
    }
  }, [showLoadingSpinner]);

  // ÏßàÎ¨∏ ÏÑûÍ∏∞ Ìï®Ïàò
  const shuffleQuestions = (questionList: LoveObstacleQuestion[]) => {
    const shuffled = [...questionList];
    for (let i = shuffled.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
    }
    return shuffled;
  };

  // ÌÖåÏä§Ìä∏ ÏãúÏûë
  const handleStartTest = () => {
    setShuffledQuestions(shuffleQuestions(questions));
    setDisplayPlayCount(prev => prev + 1);
    
    // Ï§ëÎ≥µ Ìò∏Ï∂ú Î∞©ÏßÄ
    if (!hasIncrementedPlayCount) {
      incrementPlayCount(slug);
      setHasIncrementedPlayCount(true);
    }
    
    setStarted(true);
    window.scrollTo(0, 0);
  };

  // ÎãµÎ≥Ä Ï≤òÎ¶¨
  const handleAnswer = (scores: any) => {
    const newAnswers = [...answers, scores];
    setAnswers(newAnswers);

    if (currentQuestion < shuffledQuestions.length - 1) {
      setCurrentQuestion(currentQuestion + 1);
    } else {
      setShowLoadingSpinner(true);
      
      // Í≤∞Í≥º Í≥ÑÏÇ∞
      const resultType = calculateLoveObstacleResult(newAnswers);
      const loveObstacleResult = results.find(r => r.type === resultType);
      
      // Í≤∞Í≥º ÏÑ§Ï†ï
      if (loveObstacleResult) {
        setResult(loveObstacleResult);
      }
      
      // Í≤∞Í≥ºÏóê ÎßûÎäî ÏÉÅÌíà Î∞±Í∑∏ÎùºÏö¥Îìú Î°úÎìú (Î°úÎî© ÏãúÍ∞Ñ ÎèôÏïà)
      if (loveObstacleResult && locale !== 'ko') {
        const keywords = getProductKeywordsForDating(loveObstacleResult.type, locale);
        const loadStartTime = Date.now();
        console.log('üîÆ [ÏãúÏûë] Ïó∞Ïï† Ïû•Ïï†Î¨º Í≤∞Í≥º:', loveObstacleResult.type, '‚Üí Í≤ÄÏÉâ ÌÇ§ÏõåÎìú:', keywords[0]);
        searchAliExpressProducts(keywords[0], 4, locale)
          .then(products => {
            const loadTime = Date.now() - loadStartTime;
            console.log(`‚úÖ [ÏôÑÎ£å] ÏÉÅÌíà Î°úÎìú ÏôÑÎ£å (${loadTime}ms):`, products.slice(0, 2).map(p => p.product_title));
            setAliProducts(products);
          }).catch(error => {
            console.error('‚ùå Í≤∞Í≥º ÏÉÅÌíà Î°úÎìú Ïã§Ìå®:', error);
          });
      }
    }
  };

  // Í≤∞Í≥º Í≥ÑÏÇ∞
  const calculateResult = (finalAnswers: any[]) => {
    const resultType = calculateLoveObstacleResult(finalAnswers);
    const loveObstacleResult = results.find(r => r.type === resultType);
    
    if (loveObstacleResult) {
      setResult(loveObstacleResult);
    }
  };

  // Îã§Ïãú ÌïòÍ∏∞
  const handleRetake = () => {
    setShuffledQuestions(shuffleQuestions(questions));
    setStarted(false);
    setCurrentQuestion(0);
    setAnswers([]);
    setResult(null);
    setShowResult(false);
    setShuffledOptionsMap({});
  };

  // Í≤∞Í≥º Í≥µÏú†ÌïòÍ∏∞
  const handleShareResult = async () => {
    if (!result) return;
    
    const resultTitle = result.title[locale as keyof typeof result.title] || result.title.ko;
    
    // Îã§Íµ≠Ïñ¥ Í≥µÏú† Î©îÏãúÏßÄ
    const shareMessages = {
      ko: `ÎÇòÏùò Ïó∞Ïï† Ïû•Ïï†Î¨ºÏùÄ ${resultTitle}! ÎÑàÎäî Î≠êÍ∞Ä Î¨∏Ï†úÏïº? Í∞ôÏù¥ Ìï¥Î≥¥Ïûê üòÇüíî`,
      en: `My love obstacle is ${resultTitle}! What's your problem? Let's try together üòÇüíî`,
      ja: `ÁßÅ„ÅÆÊÅãÊÑõÈöúÂÆ≥„ÅØ${resultTitle}ÔºÅ„ÅÇ„Å™„Åü„ÅÆÂïèÈ°å„ÅØ‰ΩïÔºü‰∏ÄÁ∑í„Å´„ÇÑ„Å£„Å¶„Åø„Çà„ÅÜ üòÇüíî`,
      'zh-CN': `ÊàëÁöÑÊÅãÁà±ÈöúÁ¢çÊòØ${resultTitle}ÔºÅ‰Ω†ÁöÑÈóÆÈ¢òÊòØ‰ªÄ‰πàÔºü‰∏ÄËµ∑ËØïËØïÂêß üòÇüíî`,
      'zh-TW': `ÊàëÁöÑÊàÄÊÑõÈöúÁ§ôÊòØ${resultTitle}ÔºÅ‰Ω†ÁöÑÂïèÈ°åÊòØ‰ªÄÈ∫ºÔºü‰∏ÄËµ∑Ë©¶Ë©¶Âêß üòÇüíî`,
      vi: `Tr·ªü ng·∫°i t√¨nh y√™u c·ªßa t√¥i l√† ${resultTitle}! V·∫•n ƒë·ªÅ c·ªßa b·∫°n l√† g√¨? C√πng th·ª≠ nh√© üòÇüíî`,
      id: `Hambatan cinta saya adalah ${resultTitle}! Apa masalah Anda? Mari coba bersama üòÇüíî`
    };
    
    const shareText = `${shareMessages[locale as keyof typeof shareMessages] || shareMessages.ko}\n\n${`https://myquizoasis.com${window.location.pathname}`}`;
    
    if (navigator.share) {
      try {
        await navigator.share({ text: shareText });
      } catch (error) {
        if (error instanceof Error && error.name !== 'AbortError') {
          console.error('Í≥µÏú† Ïã§Ìå®:', error);
        }
      }
    } else {
      try {
        await navigator.clipboard.writeText(shareText);
        const copyMessages = {
          ko: 'Í≤∞Í≥ºÍ∞Ä ÌÅ¥Î¶ΩÎ≥¥ÎìúÏóê Î≥µÏÇ¨ÎêòÏóàÏäµÎãàÎã§!',
          en: 'Result copied to clipboard!',
          ja: 'ÁµêÊûú„Åå„ÇØ„É™„ÉÉ„Éó„Éú„Éº„Éâ„Å´„Ç≥„Éî„Éº„Åï„Çå„Åæ„Åó„ÅüÔºÅ',
          'zh-CN': 'ÁªìÊûúÂ∑≤Â§çÂà∂Âà∞Ââ™Ë¥¥ÊùøÔºÅ',
          'zh-TW': 'ÁµêÊûúÂ∑≤Ë§áË£ΩÂà∞Ââ™Ë≤ºÊùøÔºÅ',
          vi: 'K·∫øt qu·∫£ ƒë√£ ƒë∆∞·ª£c sao ch√©p v√†o clipboard!',
          id: 'Hasil telah disalin ke clipboard!'
        };
        alert(copyMessages[locale as keyof typeof copyMessages] || copyMessages.ko);
      } catch (error) {
        console.error('ÌÅ¥Î¶ΩÎ≥¥Îìú Î≥µÏÇ¨ Ïã§Ìå®:', error);
        const errorMessages = {
          ko: 'Í≥µÏú† Í∏∞Îä•ÏùÑ ÏÇ¨Ïö©Ìï† Ïàò ÏóÜÏäµÎãàÎã§.',
          en: 'Sharing feature is not available.',
          ja: 'ÂÖ±ÊúâÊ©üËÉΩ„Çí‰ΩøÁî®„Åß„Åç„Åæ„Åõ„Çì„ÄÇ',
          'zh-CN': 'Êó†Ê≥ï‰ΩøÁî®ÂÖ±‰∫´ÂäüËÉΩ„ÄÇ',
          'zh-TW': 'ÁÑ°Ê≥ï‰ΩøÁî®ÂÖ±‰∫´ÂäüËÉΩ„ÄÇ',
          vi: 'Kh√¥ng th·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng chia s·∫ª.',
          id: 'Fitur berbagi tidak tersedia.'
        };
        alert(errorMessages[locale as keyof typeof errorMessages] || errorMessages.ko);
      }
    }
  };

  // Í≥µÏú† Ìï®ÏàòÎì§
  const shareToLine = () => {
    const url = encodeURIComponent(`https://myquizoasis.com${window.location.pathname}`);
    window.open(`https://social-plugins.line.me/lineit/share?url=${url}`, '_blank');
  };

  const shareToWeChat = async () => {
    const url = `https://myquizoasis.com${window.location.pathname}`;
    const resultTitle = result ? (result.title[locale as keyof typeof result.title] || result.title.ko) : '';
    
    // Îã§Íµ≠Ïñ¥ Í≥µÏú† Î©îÏãúÏßÄ
    const shareMessages = {
      ko: `ÎÇòÏùò Ïó∞Ïï† Ïû•Ïï†Î¨ºÏùÄ ${resultTitle}! ÎÑàÎäî Î≠êÍ∞Ä Î¨∏Ï†úÏïº? Í∞ôÏù¥ Ìï¥Î≥¥Ïûê üòÇüíî`,
      en: `My love obstacle is ${resultTitle}! What's your problem? Let's try together üòÇüíî`,
      ja: `ÁßÅ„ÅÆÊÅãÊÑõÈöúÂÆ≥„ÅØ${resultTitle}ÔºÅ„ÅÇ„Å™„Åü„ÅÆÂïèÈ°å„ÅØ‰ΩïÔºü‰∏ÄÁ∑í„Å´„ÇÑ„Å£„Å¶„Åø„Çà„ÅÜ üòÇüíî`,
      'zh-CN': `ÊàëÁöÑÊÅãÁà±ÈöúÁ¢çÊòØ${resultTitle}ÔºÅ‰Ω†ÁöÑÈóÆÈ¢òÊòØ‰ªÄ‰πàÔºü‰∏ÄËµ∑ËØïËØïÂêß üòÇüíî`,
      'zh-TW': `ÊàëÁöÑÊàÄÊÑõÈöúÁ§ôÊòØ${resultTitle}ÔºÅ‰Ω†ÁöÑÂïèÈ°åÊòØ‰ªÄÈ∫ºÔºü‰∏ÄËµ∑Ë©¶Ë©¶Âêß üòÇüíî`,
      vi: `Tr·ªü ng·∫°i t√¨nh y√™u c·ªßa t√¥i l√† ${resultTitle}! V·∫•n ƒë·ªÅ c·ªßa b·∫°n l√† g√¨? C√πng th·ª≠ nh√© üòÇüíî`,
      id: `Hambatan cinta saya adalah ${resultTitle}! Apa masalah Anda? Mari coba bersama üòÇüíî`
    };
    
    const shareText = result 
      ? `${shareMessages[locale as keyof typeof shareMessages] || shareMessages.ko}\n\n${url}`
      : `${title}\n\n${url}`;
    
    // Web Share API ÏÇ¨Ïö© (Î™®Î∞îÏùºÏóêÏÑú WeChat Ìè¨Ìï®Ìïú ÏÑ§ÏπòÎêú Ïï± Î™©Î°ù ÌëúÏãú)
    if (navigator.share) {
      try {
        await navigator.share({ text: shareText });
        return;
      } catch (error) {
        if (error instanceof Error && error.name === 'AbortError') {
          return; // ÏÇ¨Ïö©ÏûêÍ∞Ä Ï∑®ÏÜå
        }
      }
    }
    
    // Fallback: ÎßÅÌÅ¨ Î≥µÏÇ¨
    try {
      await navigator.clipboard.writeText(url);
      const copyMessages = {
        ko: 'ÎßÅÌÅ¨Í∞Ä Î≥µÏÇ¨ÎêòÏóàÏäµÎãàÎã§! WeChatÏóêÏÑú Î∂ôÏó¨ÎÑ£Í∏∞ ÌïòÏó¨ Í≥µÏú†ÌïòÏÑ∏Ïöî.',
        en: 'Link copied! Paste it in WeChat to share.',
        ja: '„É™„É≥„ÇØ„Åå„Ç≥„Éî„Éº„Åï„Çå„Åæ„Åó„ÅüÔºÅWeChat„ÅßË≤º„Çä‰ªò„Åë„Å¶ÂÖ±Êúâ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ',
        'zh-CN': 'ÈìæÊé•Â∑≤Â§çÂà∂ÔºÅÂú®ÂæÆ‰ø°‰∏≠Á≤òË¥¥ÂàÜ‰∫´„ÄÇ',
        'zh-TW': 'ÈÄ£ÁµêÂ∑≤Ë§áË£ΩÔºÅÂú®ÂæÆ‰ø°‰∏≠Ë≤º‰∏äÂàÜ‰∫´„ÄÇ',
        vi: 'Li√™n k·∫øt ƒë√£ ƒë∆∞·ª£c sao ch√©p! D√°n v√†o WeChat ƒë·ªÉ chia s·∫ª.',
        id: 'Tautan telah disalin! Tempel di WeChat untuk berbagi.'
      };
      alert(copyMessages[locale as keyof typeof copyMessages] || copyMessages.ko);
    } catch (error) {
      const errorMessages = {
        ko: 'Í≥µÏú† Í∏∞Îä•ÏùÑ ÏÇ¨Ïö©Ìï† Ïàò ÏóÜÏäµÎãàÎã§.',
        en: 'Sharing feature is not available.',
        ja: 'ÂÖ±ÊúâÊ©üËÉΩ„Çí‰ΩøÁî®„Åß„Åç„Åæ„Åõ„Çì„ÄÇ',
        'zh-CN': 'Êó†Ê≥ï‰ΩøÁî®ÂÖ±‰∫´ÂäüËÉΩ„ÄÇ',
        'zh-TW': 'ÁÑ°Ê≥ï‰ΩøÁî®ÂÖ±‰∫´ÂäüËÉΩ„ÄÇ',
        vi: 'Kh√¥ng th·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng chia s·∫ª.',
        id: 'Fitur berbagi tidak tersedia.'
      };
      alert(errorMessages[locale as keyof typeof errorMessages] || errorMessages.ko);
    }
  };

  const shareToWhatsApp = () => {
    const url = encodeURIComponent(`https://myquizoasis.com${window.location.pathname}`);
    const resultTitle = result ? (result.title[locale as keyof typeof result.title] || result.title.ko) : '';
    
    // Îã§Íµ≠Ïñ¥ Í≥µÏú† Î©îÏãúÏßÄ
    const shareMessages = {
      ko: `ÎÇòÏùò Ïó∞Ïï† Ïû•Ïï†Î¨ºÏùÄ ${resultTitle}! ÎÑàÎäî Î≠êÍ∞Ä Î¨∏Ï†úÏïº? Í∞ôÏù¥ Ìï¥Î≥¥Ïûê üòÇüíî`,
      en: `My love obstacle is ${resultTitle}! What's your problem? Let's try together üòÇüíî`,
      ja: `ÁßÅ„ÅÆÊÅãÊÑõÈöúÂÆ≥„ÅØ${resultTitle}ÔºÅ„ÅÇ„Å™„Åü„ÅÆÂïèÈ°å„ÅØ‰ΩïÔºü‰∏ÄÁ∑í„Å´„ÇÑ„Å£„Å¶„Åø„Çà„ÅÜ üòÇüíî`,
      'zh-CN': `ÊàëÁöÑÊÅãÁà±ÈöúÁ¢çÊòØ${resultTitle}ÔºÅ‰Ω†ÁöÑÈóÆÈ¢òÊòØ‰ªÄ‰πàÔºü‰∏ÄËµ∑ËØïËØïÂêß üòÇüíî`,
      'zh-TW': `ÊàëÁöÑÊàÄÊÑõÈöúÁ§ôÊòØ${resultTitle}ÔºÅ‰Ω†ÁöÑÂïèÈ°åÊòØ‰ªÄÈ∫ºÔºü‰∏ÄËµ∑Ë©¶Ë©¶Âêß üòÇüíî`,
      vi: `Tr·ªü ng·∫°i t√¨nh y√™u c·ªßa t√¥i l√† ${resultTitle}! V·∫•n ƒë·ªÅ c·ªßa b·∫°n l√† g√¨? C√πng th·ª≠ nh√© üòÇüíî`,
      id: `Hambatan cinta saya adalah ${resultTitle}! Apa masalah Anda? Mari coba bersama üòÇüíî`
    };
    
    const shareText = result 
      ? encodeURIComponent(shareMessages[locale as keyof typeof shareMessages] || shareMessages.ko)
      : encodeURIComponent(title);
    window.open(`https://wa.me/?text=${shareText}%0A%0A${url}`, '_blank');
  };

  const shareToKakao = () => {
    if (typeof window === 'undefined') return;
    
    if (!window.Kakao || !window.Kakao.isInitialized()) {
      alert('Ïπ¥Ïπ¥Ïò§ÌÜ° Í≥µÏú† Í∏∞Îä•ÏùÑ Ï¥àÍ∏∞ÌôîÌïòÎäî Ï§ëÏûÖÎãàÎã§. Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.');
      return;
    }

    const currentUrl = `https://myquizoasis.com${window.location.pathname}`;
    const thumbnailUrl = getThumbnailUrl(thumbnail || '');
    
    // Í≤∞Í≥ºÍ∞Ä ÏûàÏúºÎ©¥ ÎßûÏ∂§Ìòï Í≥µÏú† Î¨∏Íµ¨ ÏÇ¨Ïö©
    const resultTitle = result ? (result.title[locale as keyof typeof result.title] || result.title.ko) : '';
    
    // Îã§Íµ≠Ïñ¥ Í≥µÏú† Î©îÏãúÏßÄ
    const shareMessages = {
      ko: `ÎÇòÏùò Ïó∞Ïï† Ïû•Ïï†Î¨ºÏùÄ ${resultTitle}! ÎÑàÎäî Î≠êÍ∞Ä Î¨∏Ï†úÏïº? Í∞ôÏù¥ Ìï¥Î≥¥Ïûê üòÇüíî`,
      en: `My love obstacle is ${resultTitle}! What's your problem? Let's try together üòÇüíî`,
      ja: `ÁßÅ„ÅÆÊÅãÊÑõÈöúÂÆ≥„ÅØ${resultTitle}ÔºÅ„ÅÇ„Å™„Åü„ÅÆÂïèÈ°å„ÅØ‰ΩïÔºü‰∏ÄÁ∑í„Å´„ÇÑ„Å£„Å¶„Åø„Çà„ÅÜ üòÇüíî`,
      'zh-CN': `ÊàëÁöÑÊÅãÁà±ÈöúÁ¢çÊòØ${resultTitle}ÔºÅ‰Ω†ÁöÑÈóÆÈ¢òÊòØ‰ªÄ‰πàÔºü‰∏ÄËµ∑ËØïËØïÂêß üòÇüíî`,
      'zh-TW': `ÊàëÁöÑÊàÄÊÑõÈöúÁ§ôÊòØ${resultTitle}ÔºÅ‰Ω†ÁöÑÂïèÈ°åÊòØ‰ªÄÈ∫ºÔºü‰∏ÄËµ∑Ë©¶Ë©¶Âêß üòÇüíî`,
      vi: `Tr·ªü ng·∫°i t√¨nh y√™u c·ªßa t√¥i l√† ${resultTitle}! V·∫•n ƒë·ªÅ c·ªßa b·∫°n l√† g√¨? C√πng th·ª≠ nh√© üòÇüíî`,
      id: `Hambatan cinta saya adalah ${resultTitle}! Apa masalah Anda? Mari coba bersama üòÇüíî`
    };
    
    const shareDescription = result 
      ? shareMessages[locale as keyof typeof shareMessages] || shareMessages.ko
      : description;
    
    try {
      window.Kakao.Share.sendDefault({
        objectType: 'feed',
        content: {
          title: title,
          description: shareDescription,
          imageUrl: thumbnailUrl,
          link: {
            mobileWebUrl: currentUrl,
            webUrl: currentUrl,
          },
        },
        buttons: [
          {
            title: 'ÌÖåÏä§Ìä∏ ÌïòÎü¨ Í∞ÄÍ∏∞',
            link: {
              mobileWebUrl: currentUrl,
              webUrl: currentUrl,
            },
          },
        ],
      });
    } catch (error) {
      console.error('Ïπ¥Ïπ¥Ïò§ÌÜ° Í≥µÏú† Ïò§Î•ò:', error);
      alert('Ïπ¥Ïπ¥Ïò§ÌÜ° Í≥µÏú† Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    }
  };

  const shareToTelegram = () => {
    const url = encodeURIComponent(`https://myquizoasis.com${window.location.pathname}`);
    const resultTitle = result ? (result.title[locale as keyof typeof result.title] || result.title.ko) : '';
    
    // Îã§Íµ≠Ïñ¥ Í≥µÏú† Î©îÏãúÏßÄ
    const shareMessages = {
      ko: `ÎÇòÏùò Ïó∞Ïï† Ïû•Ïï†Î¨ºÏùÄ ${resultTitle}! ÎÑàÎäî Î≠êÍ∞Ä Î¨∏Ï†úÏïº? Í∞ôÏù¥ Ìï¥Î≥¥Ïûê üòÇüíî`,
      en: `My love obstacle is ${resultTitle}! What's your problem? Let's try together üòÇüíî`,
      ja: `ÁßÅ„ÅÆÊÅãÊÑõÈöúÂÆ≥„ÅØ${resultTitle}ÔºÅ„ÅÇ„Å™„Åü„ÅÆÂïèÈ°å„ÅØ‰ΩïÔºü‰∏ÄÁ∑í„Å´„ÇÑ„Å£„Å¶„Åø„Çà„ÅÜ üòÇüíî`,
      'zh-CN': `ÊàëÁöÑÊÅãÁà±ÈöúÁ¢çÊòØ${resultTitle}ÔºÅ‰Ω†ÁöÑÈóÆÈ¢òÊòØ‰ªÄ‰πàÔºü‰∏ÄËµ∑ËØïËØïÂêß üòÇüíî`,
      'zh-TW': `ÊàëÁöÑÊàÄÊÑõÈöúÁ§ôÊòØ${resultTitle}ÔºÅ‰Ω†ÁöÑÂïèÈ°åÊòØ‰ªÄÈ∫ºÔºü‰∏ÄËµ∑Ë©¶Ë©¶Âêß üòÇüíî`,
      vi: `Tr·ªü ng·∫°i t√¨nh y√™u c·ªßa t√¥i l√† ${resultTitle}! V·∫•n ƒë·ªÅ c·ªßa b·∫°n l√† g√¨? C√πng th·ª≠ nh√© üòÇüíî`,
      id: `Hambatan cinta saya adalah ${resultTitle}! Apa masalah Anda? Mari coba bersama üòÇüíî`
    };
    
    const shareText = result 
      ? shareMessages[locale as keyof typeof shareMessages] || shareMessages.ko
      : title;
    const text = encodeURIComponent(shareText);
    window.open(`https://t.me/share/url?url=${url}&text=${text}`, '_blank');
  };

  const copyLink = () => {
    navigator.clipboard.writeText(`https://myquizoasis.com${window.location.pathname}`);
    const copyMessages = {
      ko: 'ÎßÅÌÅ¨Í∞Ä Î≥µÏÇ¨ÎêòÏóàÏäµÎãàÎã§!',
      en: 'Link copied!',
      ja: '„É™„É≥„ÇØ„Åå„Ç≥„Éî„Éº„Åï„Çå„Åæ„Åó„ÅüÔºÅ',
      'zh-CN': 'ÈìæÊé•Â∑≤Â§çÂà∂ÔºÅ',
      'zh-TW': 'ÈÄ£ÁµêÂ∑≤Ë§áË£ΩÔºÅ',
      vi: 'Li√™n k·∫øt ƒë√£ ƒë∆∞·ª£c sao ch√©p!',
      id: 'Tautan telah disalin!'
    };
    alert(copyMessages[locale as keyof typeof copyMessages] || copyMessages.ko);
  };

  // ÌåùÏóÖÏóêÏÑú Í≤∞Í≥º Î≥¥Í∏∞
  const handleShowResult = () => {
    setShowResultPopup(false);
    setShowResult(true);
    window.scrollTo(0, 0);
  };

  // ÏãúÏûë ÌôîÎ©¥
  if (!started) {
    return (
      <div className="min-h-screen bg-white">
        <div className="max-w-4xl mx-auto">
        <div className="relative w-full overflow-hidden mb-3" style={{ aspectRatio: '680/384' }}>
          <Image
            src={getThumbnailUrl(thumbnail || 'test_036_love_obstacles.jpg')}
            alt={title}
            fill
            className="object-cover"
            sizes="(max-width: 768px) 100vw, (max-width: 1024px) 90vw, 800px"
            priority
          />
        </div>

        <div className="px-4">
          <h1 className="text-xl font-bold text-gray-800 mb-4 text-center">
            {title}
          </h1>

          {/* AdSense Í¥ëÍ≥† - ÌÉÄÏù¥ÌãÄÍ≥º ÏÑ§Î™Ö ÏÇ¨Ïù¥ */}
          <div className="my-6">
            <AdSensePlaceholder 
              slot={ADSENSE_CONFIG.SLOTS.START_SCREEN}
              style={{ width: '100%', height: '250px' }}
              className="mx-auto"
              label="AdSense Í¥ëÍ≥† ÏòÅÏó≠ (ÌÉÄÏù¥ÌãÄ-ÏÑ§Î™Ö ÏÇ¨Ïù¥)"
            />
          </div>

          <div className="text-gray-600 mb-6 leading-relaxed text-center space-y-4">
            <p className="font-bold text-gray-700">
              {locale === 'ko' && '„ÄåÏôú ÏûêÍæ∏ Ïó∞Ïï†Í∞Ä Ïïà Îê†Íπå? ÏßÑÏßú Ïù¥Ïú†Î•º Ï∞æÏïÑÎ≥¥ÏÑ∏Ïöî„Äç'}
              {locale === 'en' && '„ÄåWhy can\'t I find love? Let\'s find the real reason„Äç'}
              {locale === 'ja' && '„Äå„Å™„ÅúÊÅãÊÑõ„Åå„ÅÜ„Åæ„Åè„ÅÑ„Åã„Å™„ÅÑ„ÅÆÔºüÊú¨ÂΩì„ÅÆÁêÜÁî±„ÇíË¶ã„Å§„Åë„Åæ„Åó„Çá„ÅÜ„Äç'}
              {locale === 'zh-CN' && '„Äå‰∏∫‰ªÄ‰πàÊÄªÊòØÊâæ‰∏çÂà∞Áà±ÊÉÖÔºüËÆ©Êàë‰ª¨ÊâæÂà∞ÁúüÊ≠£ÁöÑÂéüÂõ†„Äç'}
              {locale === 'zh-TW' && '„ÄåÁÇ∫‰ªÄÈ∫ºÁ∏ΩÊòØÊâæ‰∏çÂà∞ÊÑõÊÉÖÔºüËÆìÊàëÂÄëÊâæÂà∞ÁúüÊ≠£ÁöÑÂéüÂõ†„Äç'}
              {locale === 'vi' && '„ÄåT·∫°i sao t√¨nh y√™u m√£i kh√¥ng th√†nh? H√£y t√¨m l√Ω do th·∫≠t s·ª±„Äç'}
              {locale === 'id' && '„ÄåMengapa cinta tidak berhasil? Mari cari tahu alasannya„Äç'}
            </p>
            <p>
              {locale === 'ko' && 'ÎßåÎÇ®ÏùÄ ÏûàÎäîÎç∞ Î∞úÏ†ÑÏù¥ Ïïà ÎêòÎÇòÏöî?'}
              {locale === 'en' && 'Do you meet people but relationships don\'t progress?'}
              {locale === 'ja' && 'Âá∫‰ºö„ÅÑ„ÅØ„ÅÇ„Çã„ÅÆ„Å´Áô∫Â±ï„Åó„Å™„ÅÑÔºü'}
              {locale === 'zh-CN' && 'ÊúâËßÅÈù¢‰ΩÜÂÖ≥Á≥ªÊ≤°ÊúâËøõÂ±ïÔºü'}
              {locale === 'zh-TW' && 'ÊúâË¶ãÈù¢‰ΩÜÈóú‰øÇÊ≤íÊúâÈÄ≤Â±ïÔºü'}
              {locale === 'vi' && 'C√≥ g·∫∑p g·ª° nh∆∞ng kh√¥ng ti·∫øn tri·ªÉn?'}
              {locale === 'id' && 'Ada pertemuan tapi tidak berkembang?'}
            </p>
            <p>
              {locale === 'ko' && 'Ïó∞Ïï†Îäî ÌïòÎäîÎç∞ Ïò§Îûò Î™ª Í∞ÄÎÇòÏöî? Ï¢ãÏïÑÌïòÎäî ÏÇ¨Îûå ÏïûÏóêÏÑú Ïñ¥ÏÉâÌïúÍ∞ÄÏöî?'}
              {locale === 'en' && 'Do you date but relationships don\'t last? Do you feel awkward around people you like?'}
              {locale === 'ja' && 'ÊÅãÊÑõ„ÅØ„Åô„Çã„Åë„Å©Èï∑Á∂ö„Åç„Åó„Å™„ÅÑÔºüÂ•Ω„Åç„Å™‰∫∫„ÅÆÂâç„Åß„Åé„Åì„Å°„Å™„ÅÑÔºü'}
              {locale === 'zh-CN' && 'ÊúâÊÅãÁà±‰ΩÜÂÖ≥Á≥ª‰∏çÊåÅ‰πÖÔºüÂú®ÂñúÊ¨¢ÁöÑ‰∫∫Èù¢ÂâçÊÑüÂà∞Â∞¥Â∞¨Ôºü'}
              {locale === 'zh-TW' && 'ÊúâÊàÄÊÑõ‰ΩÜÈóú‰øÇ‰∏çÊåÅ‰πÖÔºüÂú®ÂñúÊ≠°ÁöÑ‰∫∫Èù¢ÂâçÊÑüÂà∞Â∞∑Â∞¨Ôºü'}
              {locale === 'vi' && 'C√≥ h·∫πn h√≤ nh∆∞ng kh√¥ng l√¢u d√†i? C·∫£m th·∫•y ng∆∞·ª£ng ng√πng tr∆∞·ªõc ng∆∞·ªùi m√¨nh th√≠ch?'}
              {locale === 'id' && 'Pacaran tapi tidak bertahan lama? Merasa canggung di depan orang yang disukai?'}
            </p>
            <p>
              {locale === 'ko' && 'Ïó∞Ïï†Í∞Ä Ïûò Ïïà ÎêòÎäî Îç∞Îäî Ïù¥Ïú†Í∞Ä ÏûàÏäµÎãàÎã§.'}
              {locale === 'en' && 'There\'s a reason why love isn\'t working out.'}
              {locale === 'ja' && 'ÊÅãÊÑõ„Åå„ÅÜ„Åæ„Åè„ÅÑ„Åã„Å™„ÅÑ„ÅÆ„Å´„ÅØÁêÜÁî±„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ'}
              {locale === 'zh-CN' && 'Áà±ÊÉÖ‰∏çÈ°∫Âà©ÊòØÊúâÂéüÂõ†ÁöÑ„ÄÇ'}
              {locale === 'zh-TW' && 'ÊÑõÊÉÖ‰∏çÈ†ÜÂà©ÊòØÊúâÂéüÂõ†ÁöÑ„ÄÇ'}
              {locale === 'vi' && 'T√¨nh y√™u kh√¥ng th√†nh c√¥ng c√≥ l√Ω do.'}
              {locale === 'id' && 'Ada alasan mengapa cinta tidak berhasil.'}
            </p>
            <p>
              {locale === 'ko' && 'Í≥ºÎèÑÌïú ÏôÑÎ≤ΩÏ£ºÏùò ÎïåÎ¨∏ÏùºÍπåÏöî? ÏûêÏ°¥Í∞êÏù¥ ÎÇÆÏïÑÏÑúÏùºÍπåÏöî? Í≥ºÍ±∞Ïùò ÏÉÅÏ≤ò ÎïåÎ¨∏ÏùºÍπåÏöî? Ïù¥ÏÉÅÏù¥ ÎÑàÎ¨¥ ÎÜíÏïÑÏÑúÏùºÍπåÏöî?'}
              {locale === 'en' && 'Is it excessive perfectionism? Low self-esteem? Past wounds? Unrealistic expectations?'}
              {locale === 'ja' && 'ÈÅéÂ∫¶„Å™ÂÆåÁíß‰∏ªÁæ©„ÅÆ„Åõ„ÅÑÔºüËá™Â∞äÂøÉ„Åå‰Ωé„ÅÑ„Åã„ÇâÔºüÈÅéÂéª„ÅÆÂÇ∑„ÅÆ„Åõ„ÅÑÔºüÁêÜÊÉ≥„ÅåÈ´ò„Åô„Åé„Çã„Åã„ÇâÔºü'}
              {locale === 'zh-CN' && 'ÊòØËøáÂ∫¶ÂÆåÁæé‰∏ª‰πâÔºüËá™Â∞äÂøÉ‰ΩéÔºüËøáÂéªÁöÑÂàõ‰º§ÔºüÊúüÊúõËøáÈ´òÔºü'}
              {locale === 'zh-TW' && 'ÊòØÈÅéÂ∫¶ÂÆåÁæé‰∏ªÁæ©ÔºüËá™Â∞äÂøÉ‰ΩéÔºüÈÅéÂéªÁöÑÂâµÂÇ∑ÔºüÊúüÊúõÈÅéÈ´òÔºü'}
              {locale === 'vi' && 'C√≥ ph·∫£i do ch·ªß nghƒ©a ho√†n h·∫£o qu√° m·ª©c? T·ª± ti? V·∫øt th∆∞∆°ng qu√° kh·ª©? K·ª≥ v·ªçng qu√° cao?'}
              {locale === 'id' && 'Apakah karena perfeksionisme berlebihan? Harga diri rendah? Luka masa lalu? Harapan terlalu tinggi?'}
            </p>
            <p className="whitespace-pre-line">
              {locale === 'ko' && 'ÎãπÏã†ÎèÑ Î™®Î•¥Îäî ÏÇ¨Ïù¥ Ïó∞Ïï†Î•º Î∞©Ìï¥ÌïòÎäî ÏöîÏÜåÎ•º Ï†ïÌôïÌïòÍ≤å Ï∞æÏïÑÎìúÎ¶ΩÎãàÎã§.'}
              {locale === 'en' && 'We\'ll accurately identify the factors blocking your love life that you might not even realize.'}
              {locale === 'ja' && '„ÅÇ„Å™„Åü„ÇÇÊ∞ó„Å•„Åã„Å™„ÅÑ„ÅÜ„Å°„Å´ÊÅãÊÑõ„ÇíÂ¶®„Åí„Å¶„ÅÑ„ÇãË¶ÅÁ¥†„ÇíÊ≠£Á¢∫„Å´Ë¶ã„Å§„Åë„Åæ„Åô„ÄÇ'}
              {locale === 'zh-CN' && 'Êàë‰ª¨‰ºöÂáÜÁ°ÆÊâæÂá∫‰Ω†ÂèØËÉΩÊ≤°ÊúâÊÑèËØÜÂà∞ÁöÑÈòªÁ¢ç‰Ω†ÊÅãÁà±ÁöÑÂõ†Á¥†„ÄÇ'}
              {locale === 'zh-TW' && 'ÊàëÂÄëÊúÉÊ∫ñÁ¢∫ÊâæÂá∫‰Ω†ÂèØËÉΩÊ≤íÊúâÊÑèË≠òÂà∞ÁöÑÈòªÁ§ô‰Ω†ÊàÄÊÑõÁöÑÂõ†Á¥†„ÄÇ'}
              {locale === 'vi' && 'Ch√∫ng t√¥i s·∫Ω t√¨m ra ch√≠nh x√°c nh·ªØng y·∫øu t·ªë c·∫£n tr·ªü t√¨nh y√™u m√† b·∫°n c√≥ th·ªÉ kh√¥ng nh·∫≠n ra.'}
              {locale === 'id' && 'Kami akan menemukan secara akurat faktor-faktor yang menghalangi kehidupan cinta Anda yang mungkin tidak Anda sadari.'}
            </p>
            <p>
              {locale === 'ko' && 'Î¨∏Ï†úÎ•º ÏïåÏïÑÏïº Ìï¥Í≤∞Ìï† Ïàò ÏûàÏäµÎãàÎã§ üí™'}
              {locale === 'en' && 'You need to know the problem to solve it üí™'}
              {locale === 'ja' && 'ÂïèÈ°å„ÇíÁü•„Çâ„Å™„Åë„Çå„Å∞Ëß£Ê±∫„Åß„Åç„Åæ„Åõ„Çì üí™'}
              {locale === 'zh-CN' && 'Âè™ÊúâÁü•ÈÅìÈóÆÈ¢òÊâçËÉΩËß£ÂÜ≥ÈóÆÈ¢ò üí™'}
              {locale === 'zh-TW' && 'Âè™ÊúâÁü•ÈÅìÂïèÈ°åÊâçËÉΩËß£Ê±∫ÂïèÈ°å üí™'}
              {locale === 'vi' && 'C·∫ßn bi·∫øt v·∫•n ƒë·ªÅ m·ªõi gi·∫£i quy·∫øt ƒë∆∞·ª£c üí™'}
              {locale === 'id' && 'Perlu tahu masalahnya untuk bisa menyelesaikannya üí™'}
            </p>
            <p>
              {locale === 'ko' && 'ÏÜåÏöî ÏãúÍ∞Ñ Îã® 3Î∂Ñ! ÏÜîÏßÅÌïòÍ≤å ÎãµÌï¥Ï£ºÏÑ∏Ïöî ‚ú®'}
              {locale === 'en' && 'Takes only 3 minutes! Please answer honestly ‚ú®'}
              {locale === 'ja' && 'ÊâÄË¶ÅÊôÇÈñì„Çè„Åö„Åã3ÂàÜÔºÅÊ≠£Áõ¥„Å´Á≠î„Åà„Å¶„Åè„Å†„Åï„ÅÑ ‚ú®'}
              {locale === 'zh-CN' && 'Âè™ÈúÄ3ÂàÜÈíüÔºÅËØ∑ËØöÂÆûÂõûÁ≠î ‚ú®'}
              {locale === 'zh-TW' && 'Âè™ÈúÄ3ÂàÜÈêòÔºÅË´ãË™†ÂØ¶ÂõûÁ≠î ‚ú®'}
              {locale === 'vi' && 'Ch·ªâ m·∫•t 3 ph√∫t! H√£y tr·∫£ l·ªùi th√†nh th·∫≠t ‚ú®'}
              {locale === 'id' && 'Hanya butuh 3 menit! Silakan jawab dengan jujur ‚ú®'}
            </p>
          </div>

          <div className="flex justify-center mb-4">
            <button
              onClick={handleStartTest}
              className="bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white font-bold py-4 px-8 rounded-full shadow-lg transform hover:scale-105 transition-all duration-200"
            >
              {t('mbti.startTest')}
            </button>
          </div>

          <p className="text-sm font-bold text-center mb-6" style={{ color: '#669df6' }}>
            {t('mbti.totalParticipants', { count: formatPlayCount(displayPlayCount, locale as Locale) })}
          </p>

          <div className="max-w-[680px] mx-auto mb-6">
            {locale === 'ko' ? (
              <iframe 
                src="https://ads-partners.coupang.com/widgets.html?id=925074&template=carousel&trackingCode=AF6775264&subId=&width=680&height=140&tsource=" 
                width="680" 
                height="140" 
                frameBorder="0" 
                scrolling="no" 
                referrerPolicy="unsafe-url"
                className="w-full"
              />
            ) : aliProducts.length > 0 ? (
              <ProductRecommendations 
                products={aliProducts}
                title={locale === 'ja' ? 'Èñ¢ÈÄ£ÂïÜÂìÅ' :
                       locale === 'zh-CN' ? 'Áõ∏ÂÖ≥‰∫ßÂìÅ' :
                       locale === 'zh-TW' ? 'Áõ∏ÈóúÁî¢ÂìÅ' :
                       locale === 'vi' ? 'S·∫£n ph·∫©m li√™n quan' :
                       locale === 'id' ? 'Produk terkait' :
                       'Related Products'}
                locale={locale}
              />
            ) : (
              <div className="flex justify-center">
                <a 
                  href="https://s.click.aliexpress.com/e/_c4VOb3UR?bz=300*250" 
                  target="_parent"
                >
                  <Image 
                    width={300} 
                    height={250} 
                    src="https://ae01.alicdn.com/kf/S3619e57974f148d087c950fe497cdf55q/300x250.jpg"
                    alt="AliExpress"
                    style={{ maxWidth: '300px', height: 'auto' }}
                  />
                </a>
              </div>
            )}
          </div>

          <div className="mb-8 text-center">
            <h2 className="text-lg font-bold text-gray-800 mb-4">
              {t('mbti.shareWithFriends')}
            </h2>
            <div className="flex justify-center gap-2">
              <button onClick={copyLink} className="flex items-center justify-center w-12 h-12 hover:scale-110 transition-transform">
                <Image src="/icons/link.jpeg" alt="ÎßÅÌÅ¨ Î≥µÏÇ¨" width={46} height={46} className="rounded-lg" />
              </button>
              <button onClick={shareToKakao} className="flex items-center justify-center w-12 h-12 hover:scale-110 transition-transform">
                <Image src="/icons/kakao.jpeg" alt="Ïπ¥Ïπ¥Ïò§ÌÜ°" width={46} height={46} className="rounded-lg" />
              </button>
              <button onClick={shareToTelegram} className="flex items-center justify-center w-12 h-12 hover:scale-110 transition-transform">
                <Image src="/icons/telegram.jpeg" alt="ÌÖîÎ†àÍ∑∏Îû®" width={46} height={46} className="rounded-lg" />
              </button>
              <button onClick={shareToWeChat} className="flex items-center justify-center w-12 h-12 hover:scale-110 transition-transform">
                <Image src="/icons/wechat.jpeg" alt="ÏúÑÏ±ó" width={46} height={46} className="rounded-lg" />
              </button>
              <button onClick={shareToLine} className="flex items-center justify-center w-12 h-12 hover:scale-110 transition-transform">
                <Image src="/icons/line.jpeg" alt="ÎùºÏù∏" width={46} height={46} className="rounded-lg" />
              </button>
              <button onClick={shareToWhatsApp} className="flex items-center justify-center w-12 h-12 hover:scale-110 transition-transform">
                <Image src="/icons/whatsapp.jpeg" alt="ÏôìÏ∏†Ïï±" width={46} height={46} className="rounded-lg" />
              </button>
            </div>
          </div>

          {similarTestsState.length > 0 && (
            <div className="mb-8 pb-4">
            <h2 className="text-xl font-bold text-gray-800 mb-6">
              {t('recommendations.similarTests') || 'Ïú†ÏÇ¨Ìïú Îã§Î•∏ ÌÖåÏä§Ìä∏'}
            </h2>
              <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-2 xl:grid-cols-2 gap-4">
                {similarTestsState.map((test) => (
                  <Link key={test.id} href={`/${locale}/test/${test.slug}`} className="block group">
                    <div className="bg-white rounded-lg shadow card-hover overflow-hidden">
                      <div className="relative aspect-video">
                        <Image
                          src={getThumbnailUrl(test.thumbnail)}
                          alt={test.title}
                          fill
                          className="object-cover"
                          sizes="(max-width: 640px) 100vw, (max-width: 1024px) 50vw, (max-width: 1280px) 33vw, 20vw"
                        />
                      </div>
                      <div className="p-4">
                        <div className="flex items-center justify-end gap-3">
                          <h3 className="font-semibold text-gray-800 group-hover:text-primary-600 transition-colors line-clamp-2 flex-1">
                            {test.title}
                          </h3>
                          <div className="font-semibold text-gray-800 group-hover:text-primary-600 transition-colors flex items-center gap-1.5 text-sm flex-shrink-0">
                            <Play size={14} />
                            <span>{formatPlayCount(test.playCount, locale as Locale)}</span>
                          </div>
                        </div>
                      </div>
                    </div>
                  </Link>
                ))}
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
    );
  }

  // Î°úÎî© Ïä§ÌîºÎÑà
  if (showLoadingSpinner) {
    return (
      <div className="min-h-screen flex flex-col items-center justify-center bg-gray-50 p-4">
        {/* AdSense Í¥ëÍ≥† - Î°úÎî© Ïä§ÌîºÎÑà ÏÉÅÎã® */}
        <div className="mb-8 w-full max-w-[680px]">
          <AdSensePlaceholder 
            slot={ADSENSE_CONFIG.SLOTS.LOADING_TOP}
            style={{ width: '100%', height: '250px' }}
            className="mx-auto"
            label="AdSense Í¥ëÍ≥† ÏòÅÏó≠ (Î°úÎî© Ïä§ÌîºÎÑà ÏÉÅÎã®)"
          />
        </div>

        <div className="flex flex-col items-center justify-center">
          <div className="w-16 h-16 border-4 border-t-4 border-gray-200 border-t-blue-500 rounded-full animate-spin"></div>
          <p className="mt-4 text-lg text-gray-700">{t('mbti.loadingResults')}</p>
        </div>

        {/* AdSense Í¥ëÍ≥† - Î°úÎî© Ïä§ÌîºÎÑà ÌïòÎã® */}
        <div className="mt-8 w-full max-w-[680px]">
          <AdSensePlaceholder 
            slot={ADSENSE_CONFIG.SLOTS.LOADING_BOTTOM}
            style={{ width: '100%', height: '250px' }}
            className="mx-auto"
            label="AdSense Í¥ëÍ≥† ÏòÅÏó≠ (Î°úÎî© Ïä§ÌîºÎÑà ÌïòÎã®)"
          />
        </div>
      </div>
    );
  }

  // Í≤∞Í≥º ÌåùÏóÖ
  if (showResultPopup) {
    return (
      <div className="fixed inset-0 bg-black bg-opacity-80 flex items-center justify-center z-50 p-4">
        <div className="bg-white rounded-2xl p-8 max-w-md w-full mx-4 text-center shadow-2xl">
          <h2 className="text-2xl font-bold text-gray-800 mb-4">
            üéâ {t('mbti.testCompleted')}
          </h2>
          
          
          <div className="mb-6">
            {locale === 'ko' ? (
              <div>
                <p className="text-xs text-gray-500 text-center mb-3">
                  Ïø†Ìå° ÌååÌä∏ÎÑàÏä§ ÌôúÎèôÏùò ÏùºÌôòÏúºÎ°ú, Ïù¥Ïóê Îî∞Î•∏ ÏùºÏ†ïÏï°Ïùò ÏàòÏàòÎ£åÎ•º Ï†úÍ≥µÎ∞õÏäµÎãàÎã§
                </p>
                <div className="flex justify-center">
                <iframe 
                  src="https://ads-partners.coupang.com/widgets.html?id=923499&template=carousel&trackingCode=AF6775264&subId=&width=300&height=250&tsource=" 
                  width="300" 
                  height="250" 
                  frameBorder="0" 
                  scrolling="no" 
                  referrerPolicy="unsafe-url"
                  className="rounded-lg"
                />
                </div>
              </div>
            ) : aliProducts.length > 0 ? (
              <div className="max-w-sm mx-auto">
                <ProductRecommendations 
                  products={aliProducts.slice(0, 3)}
                  title=""
                  locale={locale}
                />
              </div>
            ) : (
              <div className="flex justify-center">
                <a 
                  href="https://s.click.aliexpress.com/e/_c4VOb3UR?bz=300*250" 
                  target="_blank"
                  rel="noopener noreferrer"
                >
                  <Image 
                    width={300} 
                    height={250} 
                    src="https://ae01.alicdn.com/kf/S3619e57974f148d087c950fe497cdf55q/300x250.jpg"
                    alt="AliExpress"
                    className="rounded-lg"
                    style={{ maxWidth: '300px', height: 'auto' }}
                  />
                </a>
              </div>
            )}
          </div>

          <button
            onClick={handleShowResult}
            className="w-full bg-gradient-to-r from-primary-500 to-secondary-500 text-white py-4 px-6 rounded-xl text-xl font-bold hover:from-primary-600 hover:to-secondary-600 transition-all duration-300 shadow-lg"
          >
            {t('mbti.viewAnalysisResults')}
          </button>
        </div>
      </div>
    );
  }

  // Í≤∞Í≥º ÌôîÎ©¥
  if (showResult && result) {
    const resultTitle = result.title[locale as keyof typeof result.title] || result.title.ko;
    const resultDescription = result.description[locale as keyof typeof result.description] || result.description.ko;
    // Îã§Íµ≠Ïñ¥ ÏâºÌëú Ï≤òÎ¶¨: ÏòÅÏñ¥ ÏâºÌëú+Í≥µÎ∞±, ÏùºÎ≥∏Ïñ¥ ÏâºÌëú, Ï§ëÍµ≠Ïñ¥ ÏâºÌëú Î™®Îëê ÏßÄÏõê
    const splitByCommas = (text: string) => {
      // ÏâºÌëú Îí§ Í≥µÎ∞±ÏùÑ Ìè¨Ìï®Ìïú Ìå®ÌÑ¥ÏúºÎ°ú Î∂ÑÌï†
      return text.split(/,\s+|Ôºå\s*|„ÄÅ\s*/).map(item => item.trim()).filter(item => item.length > 0);
    };
    
    const resultSymptoms = splitByCommas(result.symptoms[locale as keyof typeof result.symptoms] || result.symptoms.ko);
    const resultPattern = splitByCommas(result.patterns[locale as keyof typeof result.patterns] || result.patterns.ko);
    const resultRootCause = splitByCommas(result.causes[locale as keyof typeof result.causes] || result.causes.ko);
    const resultSolution = splitByCommas(result.solutions[locale as keyof typeof result.solutions] || result.solutions.ko);
    const resultAdvice = result.advice[locale as keyof typeof result.advice] || result.advice.ko;

    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-50 via-pink-50 to-blue-50">
        <div className="max-w-3xl mx-auto px-4 py-8">
          <div>
            <div className="text-center mb-3 bg-white rounded-2xl shadow-lg p-4 md:p-5">
              <h2 className="text-xl font-bold text-gray-800 mb-3">
                {t('mbti.yourResult')}
              </h2>
              <div className="text-6xl mb-3">{result.emoji}</div>
              <h1 className="text-2xl md:text-3xl font-bold mb-3 text-gray-800">
                {resultTitle}
              </h1>
              <p className="text-base text-gray-600 leading-relaxed">
                {resultDescription}
              </p>
            </div>

            <div className="grid grid-cols-2 gap-3 mb-3">
              <div className="bg-white rounded-xl shadow-lg p-4">
                <h3 className="text-base font-bold text-gray-800 mb-3">
                  üîç {locale === 'ko' && 'Ï£ºÏöî Ï¶ùÏÉÅ'}
                  {locale === 'en' && 'Main Symptoms'}
                  {locale === 'ja' && '‰∏ª„Å™ÁóáÁä∂'}
                  {locale === 'zh-CN' && '‰∏ªË¶ÅÁóáÁä∂'}
                  {locale === 'zh-TW' && '‰∏ªË¶ÅÁóáÁãÄ'}
                  {locale === 'vi' && 'Tri·ªáu ch·ª©ng ch√≠nh'}
                  {locale === 'id' && 'Gejala Utama'}
                </h3>
                <div className="flex flex-wrap gap-2">
                  {resultSymptoms.map((symptom, index) => (
                    <span
                      key={index}
                      className="bg-gradient-to-r from-red-100 to-pink-100 px-3 py-1.5 rounded-full text-sm font-medium text-gray-800 shadow-sm"
                    >
                      {symptom}
                    </span>
                  ))}
                </div>
              </div>

              <div className="bg-white rounded-xl shadow-lg p-4">
                <h3 className="text-base font-bold text-gray-800 mb-3">
                  üîÑ {locale === 'ko' && 'Ïó∞Ïï† Ìå®ÌÑ¥'}
                  {locale === 'en' && 'Love Patterns'}
                  {locale === 'ja' && 'ÊÅãÊÑõ„Éë„Çø„Éº„É≥'}
                  {locale === 'zh-CN' && 'ÊÅãÁà±Ê®°Âºè'}
                  {locale === 'zh-TW' && 'ÊàÄÊÑõÊ®°Âºè'}
                  {locale === 'vi' && 'M·∫´u t√¨nh y√™u'}
                  {locale === 'id' && 'Pola Cinta'}
                </h3>
                <div className="flex flex-wrap gap-2">
                  {resultPattern.map((pattern, index) => (
                    <span
                      key={index}
                      className="bg-gradient-to-r from-blue-100 to-purple-100 px-3 py-1.5 rounded-full text-sm font-medium text-gray-800 shadow-sm"
                    >
                      {pattern}
                    </span>
                  ))}
                </div>
              </div>
            </div>

            <div className="grid grid-cols-2 gap-3 mb-3">
              <div className="bg-white rounded-xl shadow-lg p-4">
                <h3 className="text-base font-bold text-gray-800 mb-3">
                  üéØ {locale === 'ko' && 'Í∑ºÎ≥∏ ÏõêÏù∏'}
                  {locale === 'en' && 'Root Causes'}
                  {locale === 'ja' && 'Ê†πÊú¨ÂéüÂõ†'}
                  {locale === 'zh-CN' && 'Ê†πÊú¨ÂéüÂõ†'}
                  {locale === 'zh-TW' && 'Ê†πÊú¨ÂéüÂõ†'}
                  {locale === 'vi' && 'Nguy√™n nh√¢n g·ªëc'}
                  {locale === 'id' && 'Penyebab Utama'}
                </h3>
                <div className="flex flex-wrap gap-2">
                  {resultRootCause.map((cause, index) => (
                    <span
                      key={index}
                      className="bg-gradient-to-r from-orange-100 to-yellow-100 px-3 py-1.5 rounded-full text-sm font-medium text-gray-800 shadow-sm"
                    >
                      {cause}
                    </span>
                  ))}
                </div>
              </div>

              <div className="bg-white rounded-xl shadow-lg p-4">
                <h3 className="text-base font-bold text-gray-800 mb-3">
                  üí° {locale === 'ko' && 'Ìï¥Í≤∞ Î∞©Î≤ï'}
                  {locale === 'en' && 'Solutions'}
                  {locale === 'ja' && 'Ëß£Ê±∫ÊñπÊ≥ï'}
                  {locale === 'zh-CN' && 'Ëß£ÂÜ≥ÊñπÊ≥ï'}
                  {locale === 'zh-TW' && 'Ëß£Ê±∫ÊñπÊ≥ï'}
                  {locale === 'vi' && 'Gi·∫£i ph√°p'}
                  {locale === 'id' && 'Solusi'}
                </h3>
                <div className="flex flex-wrap gap-2">
                  {resultSolution.map((solution, index) => (
                    <span
                      key={index}
                      className="bg-gradient-to-r from-green-100 to-emerald-100 px-3 py-1.5 rounded-full text-sm font-medium text-gray-800 shadow-sm"
                    >
                      {solution}
                    </span>
                  ))}
                </div>
              </div>
            </div>

            <div className="bg-white rounded-xl shadow-lg p-4 mb-3">
              <h3 className="text-base font-bold text-gray-800 mb-3">
                üí¨ {locale === 'ko' && 'Ï°∞Ïñ∏'}
                {locale === 'en' && 'Advice'}
                {locale === 'ja' && '„Ç¢„Éâ„Éê„Ç§„Çπ'}
                {locale === 'zh-CN' && 'Âª∫ËÆÆ'}
                {locale === 'zh-TW' && 'Âª∫Ë≠∞'}
                {locale === 'vi' && 'L·ªùi khuy√™n'}
                {locale === 'id' && 'Saran'}
              </h3>
              <p className="text-sm text-gray-700 leading-relaxed">
                {resultAdvice}
              </p>
            </div>

            <div className="mt-8 mb-6 px-4">
              <button
                onClick={handleShareResult}
                className="w-full bg-gradient-to-r from-blue-500 to-cyan-500 text-white font-bold py-4 px-6 rounded-xl hover:from-blue-600 hover:to-cyan-600 transition-all shadow-md flex items-center justify-center gap-3"
              >
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z" />
                </svg>
                {t('mbti.shareResult')}
              </button>
            </div>

            {/* AdSense Í¥ëÍ≥† - Í≤∞Í≥ºÏôÄ Îã§ÏãúÌïòÍ∏∞ Î≤ÑÌäº ÏÇ¨Ïù¥ */}
            <div className="my-6 px-4">
              <AdSensePlaceholder 
                slot={ADSENSE_CONFIG.SLOTS.RESULT_SCREEN}
                style={{ width: '100%', height: '250px' }}
                className="mx-auto"
                label="AdSense Í¥ëÍ≥† ÏòÅÏó≠ (Í≤∞Í≥º-Îã§ÏãúÌïòÍ∏∞ ÏÇ¨Ïù¥)"
              />
            </div>

            <div className="flex flex-col sm:flex-row gap-4 px-4">
              <button
                onClick={handleRetake}
                className="flex-1 bg-gray-300 text-gray-800 font-bold py-4 px-6 rounded-xl hover:bg-gray-400 transition-all shadow-md"
              >
                {t('mbti.retakeTest')}
              </button>
              <Link
                href={`/${locale}`}
                className="flex-1 bg-gradient-to-r from-purple-600 to-pink-600 text-white font-bold py-4 px-6 rounded-xl hover:from-purple-700 hover:to-pink-700 transition-all text-center shadow-md"
              >
                {t('mbti.otherTests')}
              </Link>
            </div>

            <div className="mt-8 mb-8 text-center px-4">
              <h2 className="text-lg font-bold text-gray-800 mb-4">
                {t('mbti.shareWithFriends')}
              </h2>
              <div className="flex justify-center gap-2">
                <button onClick={copyLink} className="flex items-center justify-center w-12 h-12 hover:scale-110 transition-transform">
                  <Image src="/icons/link.jpeg" alt="ÎßÅÌÅ¨ Î≥µÏÇ¨" width={46} height={46} className="rounded-lg" />
                </button>
                <button onClick={shareToKakao} className="flex items-center justify-center w-12 h-12 hover:scale-110 transition-transform">
                  <Image src="/icons/kakao.jpeg" alt="Ïπ¥Ïπ¥Ïò§ÌÜ°" width={46} height={46} className="rounded-lg" />
                </button>
                <button onClick={shareToTelegram} className="flex items-center justify-center w-12 h-12 hover:scale-110 transition-transform">
                  <Image src="/icons/telegram.jpeg" alt="ÌÖîÎ†àÍ∑∏Îû®" width={46} height={46} className="rounded-lg" />
                </button>
                <button onClick={shareToWeChat} className="flex items-center justify-center w-12 h-12 hover:scale-110 transition-transform">
                  <Image src="/icons/wechat.jpeg" alt="ÏúÑÏ±ó" width={46} height={46} className="rounded-lg" />
                </button>
                <button onClick={shareToLine} className="flex items-center justify-center w-12 h-12 hover:scale-110 transition-transform">
                  <Image src="/icons/line.jpeg" alt="ÎùºÏù∏" width={46} height={46} className="rounded-lg" />
                </button>
                <button onClick={shareToWhatsApp} className="flex items-center justify-center w-12 h-12 hover:scale-110 transition-transform">
                  <Image src="/icons/whatsapp.jpeg" alt="ÏôìÏ∏†Ïï±" width={46} height={46} className="rounded-lg" />
                </button>
              </div>
            </div>

            {/* üéØ Ïú†ÏÇ¨Ìïú Îã§Î•∏ ÌÖåÏä§Ìä∏ Ï∂îÏ≤ú ÌÜ±5 */}
            {similarTestsState.length > 0 && (
              <div className="mb-8 pb-4">
                <h2 className="text-xl font-bold text-gray-800 mb-6">
                  {t('recommendations.similarTestsTop5') || 'üéØ Ïú†ÏÇ¨Ìïú Îã§Î•∏ ÌÖåÏä§Ìä∏ Ï∂îÏ≤ú ÌÜ±5'}
                </h2>
                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-5 gap-4">
                  {similarTestsState.slice(0, 5).map((test) => (
                    <Link key={test.id} href={`/${locale}/test/${test.slug}`} className="block group">
                      <div className="bg-white rounded-lg shadow card-hover overflow-hidden">
                        <div className="relative aspect-video">
                          <Image
                            src={getThumbnailUrl(test.thumbnail)}
                            alt={test.title}
                            fill
                            className="object-cover"
                            sizes="(max-width: 640px) 100vw, (max-width: 1024px) 50vw, (max-width: 1280px) 33vw, 20vw"
                          />
                        </div>
                        <div className="p-4">
                          <div className="flex items-center justify-end gap-3">
                            <h3 className="font-semibold text-gray-800 group-hover:text-primary-600 transition-colors line-clamp-2 flex-1">
                              {test.title}
                            </h3>
                            <div className="font-semibold text-gray-800 group-hover:text-primary-600 transition-colors flex items-center gap-1.5 text-sm flex-shrink-0">
                              <Play size={14} />
                              <span>{formatPlayCount(test.playCount, locale as Locale)}</span>
                            </div>
                          </div>
                        </div>
                      </div>
                    </Link>
                  ))}
                </div>
              </div>
            )}

            {/* üî• ÏöîÏ¶ò Ïù∏Í∏∞ ÌÖåÏä§Ìä∏ Ï∂îÏ≤ú ÌÜ±5 */}
            {popularTestsState.length > 0 && (
              <div className="mb-8 pb-4">
                <h2 className="text-xl font-bold text-gray-800 mb-6">
                  {t('recommendations.popularTestsTop5') || 'üî• ÏöîÏ¶ò Ïù∏Í∏∞ ÌÖåÏä§Ìä∏ Ï∂îÏ≤ú ÌÜ±5'}
                </h2>
                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-5 gap-4">
                  {popularTestsState.map((test) => (
                    <Link key={test.id} href={`/${locale}/test/${test.slug}`} className="block group">
                      <div className="bg-white rounded-lg shadow card-hover overflow-hidden">
                        <div className="relative aspect-video">
                          <Image
                            src={getThumbnailUrl(test.thumbnail)}
                            alt={test.title}
                            fill
                            className="object-cover"
                            sizes="(max-width: 640px) 100vw, (max-width: 1024px) 50vw, (max-width: 1280px) 33vw, 20vw"
                          />
                        </div>
                        <div className="p-4">
                          <div className="flex items-center justify-end gap-3">
                            <h3 className="font-semibold text-gray-800 group-hover:text-primary-600 transition-colors line-clamp-2 flex-1">
                              {test.title}
                            </h3>
                            <div className="font-semibold text-gray-800 group-hover:text-primary-600 transition-colors flex items-center gap-1.5 text-sm flex-shrink-0">
                              <Play size={14} />
                              <span>{formatPlayCount(test.playCount, locale as Locale)}</span>
                            </div>
                          </div>
                        </div>
                      </div>
                    </Link>
                  ))}
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    );
  }

  // ÏßàÎ¨∏ ÌôîÎ©¥
  const question = shuffledQuestions[currentQuestion];
  const questionText = question.question[locale as keyof typeof question.question] || question.question.ko;
  const progress = ((currentQuestion + 1) / shuffledQuestions.length) * 100;
  
  const optionsArray = shuffledOptionsMap[currentQuestion] || question.options;

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 via-pink-50 to-blue-50">
      <div className="max-w-2xl mx-auto px-4 py-8">
        <div className="mb-8">
          <div className="flex justify-between items-center mb-2">
            <span className="text-sm font-medium text-gray-600">
              {t('mbti.progress')}
            </span>
            <span className="text-sm font-bold text-purple-600">
              {currentQuestion + 1} / {shuffledQuestions.length}
            </span>
          </div>
          <div className="w-full bg-gray-200 rounded-full h-3 overflow-hidden">
            <div
              className="bg-gradient-to-r from-purple-600 to-pink-600 h-full rounded-full transition-all duration-300 ease-out"
              style={{ width: `${progress}%` }}
            />
          </div>
        </div>

        <div>
          <h2 className="text-2xl md:text-3xl font-bold text-gray-800 mb-8 text-center leading-relaxed px-4">
            {questionText}
          </h2>

          <div className="space-y-4 px-4">
            {optionsArray.map((option, index) => {
              const optionText = option.text[locale as keyof typeof option.text] || option.text.ko;
              const label = String.fromCharCode(65 + index);
              const colors = [
                'from-purple-50 to-purple-100 hover:from-purple-100 hover:to-purple-200 border-purple-200 hover:border-purple-400',
                'from-pink-50 to-pink-100 hover:from-pink-100 hover:to-pink-200 border-pink-200 hover:border-pink-400',
                'from-blue-50 to-blue-100 hover:from-blue-100 hover:to-blue-200 border-blue-200 hover:border-blue-400',
                'from-green-50 to-green-100 hover:from-green-100 hover:to-green-200 border-green-200 hover:border-green-400',
              ];
              const bgColors = ['bg-purple-600', 'bg-pink-600', 'bg-blue-600', 'bg-green-600'];

              return (
                <button
                  key={index}
                  onClick={() => handleAnswer(option.scores)}
                  className={`w-full bg-gradient-to-r ${colors[index]} border-2 text-gray-800 font-medium py-3 px-4 rounded-xl transition-all transform hover:scale-102 text-left`}
                >
                  <div className="flex items-center">
                    <div className={`w-7 h-7 ${bgColors[index]} text-white rounded-full flex items-center justify-center font-bold mr-3 flex-shrink-0 text-sm`}>
                      {label}
                    </div>
                    <span className="text-base">{optionText}</span>
                  </div>
                </button>
              );
            })}
          </div>

          {/* AdSense Í¥ëÍ≥† - ÌÖåÏä§Ìä∏ ÏßÑÌñâ ÎßàÏßÄÎßâ ÎãµÎ≥Ä Î∞ë */}
          <div className="mt-8 px-4">
            <AdSensePlaceholder 
              slot={ADSENSE_CONFIG.SLOTS.PROGRESS_SCREEN}
              style={{ width: '100%', height: '250px' }}
              className="mx-auto"
              label="AdSense Í¥ëÍ≥† ÏòÅÏó≠ (ÌÖåÏä§Ìä∏ ÏßÑÌñâ ÎßàÏßÄÎßâ ÎãµÎ≥Ä Î∞ë)"
            />
          </div>

          <div className="mt-8 mb-8 text-center px-4">
            <h2 className="text-lg font-bold text-gray-800 mb-4">
              {t('mbti.shareWithFriends')}
            </h2>
            <div className="flex justify-center gap-2">
              <button onClick={copyLink} className="flex items-center justify-center w-12 h-12 hover:scale-110 transition-transform">
                <Image src="/icons/link.jpeg" alt="ÎßÅÌÅ¨ Î≥µÏÇ¨" width={46} height={46} className="rounded-lg" />
              </button>
              <button onClick={shareToKakao} className="flex items-center justify-center w-12 h-12 hover:scale-110 transition-transform">
                <Image src="/icons/kakao.jpeg" alt="Ïπ¥Ïπ¥Ïò§ÌÜ°" width={46} height={46} className="rounded-lg" />
              </button>
              <button onClick={shareToTelegram} className="flex items-center justify-center w-12 h-12 hover:scale-110 transition-transform">
                <Image src="/icons/telegram.jpeg" alt="ÌÖîÎ†àÍ∑∏Îû®" width={46} height={46} className="rounded-lg" />
              </button>
              <button onClick={shareToWeChat} className="flex items-center justify-center w-12 h-12 hover:scale-110 transition-transform">
                <Image src="/icons/wechat.jpeg" alt="ÏúÑÏ±ó" width={46} height={46} className="rounded-lg" />
              </button>
              <button onClick={shareToLine} className="flex items-center justify-center w-12 h-12 hover:scale-110 transition-transform">
                <Image src="/icons/line.jpeg" alt="ÎùºÏù∏" width={46} height={46} className="rounded-lg" />
              </button>
              <button onClick={shareToWhatsApp} className="flex items-center justify-center w-12 h-12 hover:scale-110 transition-transform">
                <Image src="/icons/whatsapp.jpeg" alt="ÏôìÏ∏†Ïï±" width={46} height={46} className="rounded-lg" />
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}