# QuizOasis Development Rules

## Social Sharing Multilingual Requirements (CRITICAL)

### 1. Social Sharing Message Localization
❌ DON'T:
- Hardcode Korean sharing messages in social sharing functions
- Use hardcoded Korean text in shareToKakao, shareToWeChat, shareToWhatsApp, shareToTelegram, shareToLine functions
- Leave alert messages in Korean only (e.g., "링크가 복사되었습니다!", "카카오톡 공유 중 오류가 발생했습니다.")
- Ignore locale parameter in sharing functions

✅ DO:
- Implement locale-based conditional rendering for ALL social sharing functions
- Use t() function for all sharing messages: `t('testName.shareMessages.platform', { type: resultTitle })`
- Localize ALL alert messages in sharing functions
- Create language-specific sharing messages for each platform
- Ensure consistent multilingual support across all sharing methods

### 2. Social Sharing Functions to Localize
✅ DO localize ALL of these functions:
- handleShareResult() - Default sharing function
- shareToKakao() - KakaoTalk sharing
- shareToWeChat() - WeChat sharing  
- shareToWhatsApp() - WhatsApp sharing
- shareToTelegram() - Telegram sharing
- shareToLine() - Line sharing
- copyLink() - Link copy function

### 3. Social Sharing Message Pattern
✅ DO use this pattern for all sharing messages:
```typescript
// In messages files (ko.json, en.json, etc.)
"testName": {
  "shareMessages": {
    "default": "나는 {type}! 테스트 결과... 너는 어떻게 해? 같이 해보자! 💰",
    "kakao": "나는 {type}! 테스트 결과... 너는 어떻게 해? 같이 해보자! 💰",
    "wechat": "나는 {type}! 테스트 결과... 너는 어떻게 해? 같이 해보자! 💰",
    "whatsapp": "나는 {type}! 테스트 결과... 너는 어떻게 해? 같이 해보자! 💰",
    "telegram": "나는 {type}! 테스트 결과... 너는 어떻게 해? 같이 해보자! 💰",
    "line": "나는 {type}! 테스트 결과... 너는 어떻게 해? 같이 해보자! 💰"
  }
}

// In component functions
const shareText = t('testName.shareMessages.default', { type: resultTitle });
const shareDescription = t('testName.shareMessages.kakao', { type: resultTitle });
```

### 4. Alert Message Localization
✅ DO localize ALL alert messages in sharing functions:
- Clipboard copy success messages
- Sharing feature error messages  
- WeChat link copy instructions
- KakaoTalk initialization messages
- Any user-facing text in sharing functions

### 5. UI Text Localization for Social Sharing
✅ DO localize ALL UI elements related to social sharing:
- Button alt texts: `alt={t('testName.ui.linkCopy')}`, `alt={t('testName.ui.kakao')}`
- AdSense labels: `label={t('testName.ui.adsenseTitle')}`
- Similar tests section: `{t('testName.ui.similarTests')}`
- All user-facing text in result screens

### 6. Social Sharing Implementation Checklist
✅ DO verify these when implementing social sharing:
- [ ] All sharing functions use t() for messages
- [ ] All alert messages are localized
- [ ] All UI text elements are localized
- [ ] All 7 languages have complete translation keys
- [ ] Share messages work correctly in all languages
- [ ] No hardcoded Korean text remains in components
- [ ] Consistent multilingual experience across all sharing platforms

## Example: Optimism Test Implementation

### Translation Files Structure
```json
{
  "optimismTest": {
    "shareMessages": {
      "default": "나는 {type}! 🌤️ 컵에 물이 반? 너는 어떻게 볼래?",
      "kakao": "나는 {type}! 🌤️ 컵에 물이 반? 너는 어떻게 볼래?",
      "wechat": "나는 {type}! 🌤️ 컵에 물이 반? 너는 어떻게 볼래?",
      "whatsapp": "나는 {type}! 🌤️ 컵에 물이 반? 너는 어떻게 볼래?",
      "telegram": "나는 {type}! 🌤️ 컵에 물이 반? 너는 어떻게 볼래?",
      "line": "나는 {type}! 🌤️ 컵에 물이 반? 너는 어떻게 볼래?"
    },
    "alerts": {
      "linkCopied": "링크가 복사되었습니다!",
      "resultCopied": "결과가 클립보드에 복사되었습니다!",
      "shareFailed": "공유 기능을 사용할 수 없습니다.",
      "wechatCopy": "링크가 복사되었습니다! WeChat에서 붙여넣기 하여 공유하세요.",
      "kakaoInit": "카카오톡 공유 기능을 초기화하는 중입니다. 잠시 후 다시 시도해주세요.",
      "kakaoError": "카카오톡 공유 중 오류가 발생했습니다."
    }
  }
}
```

### Component Implementation Pattern
```typescript
// ✅ CORRECT - Multilingual sharing
const handleShareResult = async () => {
  if (!result) return;
  
  const resultTitle = result.title[locale as keyof typeof result.title] || result.title.ko;
  const shareMessage = t('optimismTest.shareMessages.default', { type: resultTitle });
  const shareText = `${shareMessage}\n\n${url}`;
  
  // ... rest of implementation
};

// ❌ WRONG - Hardcoded Korean text
const handleShareResult = async () => {
  const shareText = `나는 ${resultTitle}! 🌤️ 컵에 물이 반? 너는 어떻게 볼래?\n\n${url}`;
  // Korean text hardcoded
};
```

## Common Mistakes to Avoid

1. **Hardcoding Korean in sharing functions** - Always use t() function
2. **Missing alert localizations** - All user-facing alerts must be localized
3. **Inconsistent message formats** - Keep message structure consistent across platforms
4. **Missing translation keys** - Ensure all 7 languages have complete keys
5. **Ignoring locale parameter** - Always check locale before displaying text
